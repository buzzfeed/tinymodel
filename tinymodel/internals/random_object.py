import random as r

class RecursionDepthError(Exception):
    pass

def __random_field(tinymodel, this_type, model_recursion_depth=1, this_field_def=None):
    """
    Generates a randomly-valued instance of a specified type. Nested collection types are generated by recursion.
    Since the model has already passed validation, we can assume that this_type is either one of the SUPPORTED_BUILTINS or a valid user-defined type.
    Be aware that this assumption may not hold true if the field was set to validate=False

    :param class | {class: class} | [class] | (class,) | {class,} this_type: The type of object to generate, as a Python class definition
    :param int model_recursion_depth: The number of levels to recurse when a FIELD entry references another TinyModel class.
                                      We require this in order to avoid infinite recursion on cyclical references.
    :param FieldDef this_field_def: The field that we are generating a random value for

    :rtype object: A randomly-valued instance of this_type

    """

    type_of_type = type(this_type)

    if this_field_def.choices:
        return r.choice(this_field_def.choices)[0]
    elif type_of_type in (list, tuple, set):
        element_type = iter(this_type).next()
        return tinymodel.SUPPORTED_BUILTINS[type_of_type]['random'](tinymodel, element_type, model_recursion_depth, this_field_def)
    elif type_of_type == dict:
        (key_type, value_type) = this_type.items()[0]
        return tinymodel.SUPPORTED_BUILTINS[dict]['random'](tinymodel, key_type, value_type, model_recursion_depth, this_field_def)
    elif this_type in tinymodel.SUPPORTED_BUILTINS:
        return tinymodel.SUPPORTED_BUILTINS[this_type]['random']()
    else:
        if model_recursion_depth > 0:
            # Assume we are dealing with a valid user-defined type
            return this_type(random=True, model_recursion_depth=(model_recursion_depth - 1))
        else:
            raise RecursionDepthError


def random(tinymodel, model_recursion_depth=1):
    """
    Assigns random values to the FIELD_DEFS of the TinyModel.
    Iterates over the FIELD_DEFS attribute to generate a random instance of each FIELD_DEFS type.

    :param int model_recursion_depth: The number of levels to recurse when a FIELD entry references another TinyModel class.
                                      We require this in order to avoid infinite recursion on cyclical references.
    :rtype dict: A dict of the attributes to set

    """
    attrs_to_set = {}

    for field_def in tinymodel.FIELD_DEFS:
        if field_def.title not in ['id', 'created_at', 'updated_at']:
            try:
                random_field_value =  __random_field(tinymodel,
                                                     this_type=next(iter(field_def.allowed_types)),
                                                     model_recursion_depth=model_recursion_depth,
                                                     this_field_def=field_def)
                attrs_to_set[field_def.title] = random_field_value
            except RecursionDepthError:
                pass
    return attrs_to_set
